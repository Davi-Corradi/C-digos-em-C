Classe Funcionario






using System;
using System.Collections.Generic;

namespace ConsoleApp
{
    internal class Funcionario
    {
        public static List<Funcionario> Funcionarios = new List<Funcionario>();

        private int Matricula;
        private string Nome;
        private string cargoAtual;
        private float salarioAtual;

        // Getters estilo Java
        public int getMatricula() { return Matricula; }
        public string getNome() { return Nome; }
        public string getCargoAtual() { return cargoAtual; }
        public float getSalarioAtual() { return salarioAtual; }

        // Construtor
        public Funcionario(int matricula, string nome, string cargoAtual, float salarioAtual)
        {
            this.Matricula = matricula;
            this.Nome = nome;
            this.cargoAtual = cargoAtual;
            this.salarioAtual = salarioAtual;
        }

        // Cadastrar funcionário
        public static bool cadastrar(Funcionario f)
        {
            foreach (var func in Funcionarios)
            {
                if (func.Matricula == f.Matricula)
                {
                    Console.WriteLine($"\nFuncionário com matrícula {f.Matricula} já cadastrado!");
                    return false;
                }
            }
            Funcionarios.Add(f);
            return true;
        }

        // Listar todos
        public static void listar()
        {
            Console.WriteLine("\nLista de funcionários cadastrados: \n");

            foreach (var f in Funcionarios)
            {
                Console.WriteLine($"Nome: {f.getNome()} \nMatrícula: {f.getMatricula()} \nCargo: {f.getCargoAtual()} \nSalário: R$ {f.getSalarioAtual()}");
                Console.WriteLine("------------------------------------");
            }
        }

        // Consultar funcionário por matrícula (interação com usuário)
        public static void consultar()
        {
            Console.Write("\nDigite a matrícula do funcionário que deseja consultar: ");
            int matricula = int.Parse(Console.ReadLine());

            Funcionario encontrado = null;

            foreach (var f in Funcionarios)
            {
                if (f.Matricula == matricula)
                {
                    encontrado = f;
                    break;
                }
            }

            if (encontrado != null)
            {
                Console.WriteLine($"\nFuncionário encontrado!");
                Console.WriteLine($"Nome: {encontrado.getNome()}");
                Console.WriteLine($"Matrícula: {encontrado.getMatricula()}");
                Console.WriteLine($"Cargo: {encontrado.getCargoAtual()}");
                Console.WriteLine($"Salário: R$ {encontrado.getSalarioAtual()}");
            }
            else
            {
                Console.WriteLine($"\nFuncionário com matrícula {matricula} não encontrado.");
            }
        }

        // Atualizar salário (soma um valor ao salário atual)
        public static void atualizarSalario(Funcionario f, float valor)
        {
            f.salarioAtual += valor;
            Console.WriteLine($"\nSalário atualizado do funcionário {f.getNome()}: R$ {f.getSalarioAtual()}");
        }
    }
}









XAML


<Window x:Class="Quiz_Game_WPF_MOO_ICT.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Quiz Game" Height="480" Width="800">
	<Grid>
		<!-- Menu para escolher categoria -->
		<StackPanel x:Name="menuPanel" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="20">
			<TextBlock Text="Escolha uma categoria:" FontSize="20" Margin="0,0,0,10" HorizontalAlignment="Center"/>
			<ComboBox x:Name="categorySelector" Width="200" Height="30" Margin="0,0,0,10" />
			<Button Content="Iniciar Jogo" Width="120" Height="30" Click="StartGameFromCategory"/>
		</StackPanel>

		<!-- Quiz principal, oculto até iniciar -->
		<Canvas x:Name="myCanvas" Visibility="Collapsed" Margin="10">
			<TextBlock x:Name="txtQuestion" FontSize="18" TextWrapping="Wrap" Width="760" Canvas.Left="10" Canvas.Top="10" />

			<Button x:Name="ans1" Content="Resposta 1" Width="350" Height="50" Canvas.Top="70" Canvas.Left="10" Click="checkAnswer" />
			<Button x:Name="ans2" Content="Resposta 2" Width="350" Height="50" Canvas.Top="70" Canvas.Left="380" Click="checkAnswer" />
			<Button x:Name="ans3" Content="Resposta 3" Width="350" Height="50" Canvas.Top="130" Canvas.Left="10" Click="checkAnswer" />
			<Button x:Name="ans4" Content="Resposta 4" Width="350" Height="50" Canvas.Top="130" Canvas.Left="380" Click="checkAnswer" />

			<Image x:Name="qImage" Width="300" Height="200" Canvas.Top="200" Canvas.Left="10" />

			<Label x:Name="scoreText" Content="Pontuação: 0" Canvas.Top="420" Canvas.Left="10" FontSize="16" FontWeight="Bold"/>
		</Canvas>
	</Grid>
</Window>












Main.cs







using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Imaging;

namespace Quiz_Game_WPF_MOO_ICT
{
    public partial class MainWindow : Window
    {
        public class Pergunta
        {
            public string Categoria { get; set; }
            public string Texto { get; set; }
            public string[] Alternativas { get; set; }
            public int RespostaCorreta { get; set; } // índice 0 a 3
            public string CaminhoImagem { get; set; }
        }

        List<Pergunta> todasPerguntas = new List<Pergunta>
        {
            // --- Geografia ---
            new Pergunta
            {
                Categoria = "Geografia",
                Texto = "Qual é a capital da França?",
                Alternativas = new[] { "Berlim", "Madrid", "Paris", "Lisboa" },
                RespostaCorreta = 2,
                CaminhoImagem = "pack://application:,,,/images/1.jpg"
            },
            new Pergunta
            {
                Categoria = "Geografia",
                Texto = "Qual é o maior oceano do mundo?",
                Alternativas = new[] { "Atlântico", "Pacífico", "Índico", "Ártico" },
                RespostaCorreta = 1,
                CaminhoImagem = "pack://application:,,,/images/3.jpg"
            },
            new Pergunta
            {
                Categoria = "Geografia",
                Texto = "Qual país tem a maior população do mundo?",
                Alternativas = new[] { "Índia", "Estados Unidos", "Brasil", "China" },
                RespostaCorreta = 3,
                CaminhoImagem = "pack://application:,,,/images/11.jpg"
            },
            new Pergunta
            {
                Categoria = "Geografia",
                Texto = "Qual é a montanha mais alta do mundo?",
                Alternativas = new[] { "K2", "Everest", "Mont Blanc", "Aconcágua" },
                RespostaCorreta = 1,
                CaminhoImagem = "pack://application:,,,/images/12.jpg"
            },

            // --- Matemática ---
            new Pergunta
            {
                Categoria = "Matemática",
                Texto = "Quanto é 9 x 7?",
                Alternativas = new[] { "63", "72", "56", "49" },
                RespostaCorreta = 0,
                CaminhoImagem = "pack://application:,,,/images/2.jpg"
            },
            new Pergunta
            {
                Categoria = "Matemática",
                Texto = "Qual o valor de π arredondado para duas casas decimais?",
                Alternativas = new[] { "3.14", "3.15", "3.12", "3.16" },
                RespostaCorreta = 0,
                CaminhoImagem = "pack://application:,,,/images/13.jpg"
            },
            new Pergunta
            {
                Categoria = "Matemática",
                Texto = "Qual é a fórmula da área do círculo?",
                Alternativas = new[] { "2πr", "πr²", "πd", "r²" },
                RespostaCorreta = 1,
                CaminhoImagem = "pack://application:,,,/images/14.jpg"
            },
            new Pergunta
            {
                Categoria = "Matemática",
                Texto = "Qual é o próximo número na sequência: 2, 4, 8, 16, ...?",
                Alternativas = new[] { "18", "24", "32", "30" },
                RespostaCorreta = 2,
                CaminhoImagem = "pack://application:,,,/images/15.jpg"
            },

            // --- Ciências ---
            new Pergunta
            {
                Categoria = "Ciência",
                Texto = "Qual é o elemento químico com símbolo O?",
                Alternativas = new[] { "Ouro", "Oxigênio", "Zinco", "Prata" },
                RespostaCorreta = 1,
                CaminhoImagem = "pack://application:,,,/images/4.jpg"
            },
            new Pergunta
            {
                Categoria = "Ciência",
                Texto = "Qual é o planeta mais próximo do Sol?",
                Alternativas = new[] { "Marte", "Vênus", "Mercúrio", "Terra" },
                RespostaCorreta = 2,
                CaminhoImagem = "pack://application:,,,/images/7.jpg"
            },
            new Pergunta
            {
                Categoria = "Ciência",
                Texto = "Qual destes é um mamífero?",
                Alternativas = new[] { "Cobra", "Tubarão", "Golfinho", "Papagaio" },
                RespostaCorreta = 2,
                CaminhoImagem = "pack://application:,,,/images/8.jpg"
            },
            new Pergunta
            {
                Categoria = "Ciência",
                Texto = "Qual a função dos glóbulos vermelhos no sangue?",
                Alternativas = new[] { "Defender contra infecções", "Transportar oxigênio", "Coagular sangue", "Produzir hormônios" },
                RespostaCorreta = 1,
                CaminhoImagem = "pack://application:,,,/images/16.jpg"
            }
        };

        List<Pergunta> perguntasSelecionadas;
        int perguntaAtual = 0;
        int pontuacao = 0;

        public MainWindow()
        {
            InitializeComponent();

            // Categorias fixas
            var categorias = new List<string> { "Matemática", "Geografia", "Ciência" };
            categorySelector.ItemsSource = categorias;

            menuPanel.Visibility = Visibility.Visible;
            myCanvas.Visibility = Visibility.Collapsed;
        }

        private void StartGameFromCategory(object sender, RoutedEventArgs e)
        {
            if (categorySelector.SelectedItem == null)
            {
                MessageBox.Show("Por favor, selecione uma categoria!");
                return;
            }

            string categoria = categorySelector.SelectedItem.ToString();

            perguntasSelecionadas = todasPerguntas
                .Where(p => p.Categoria == categoria)
                .OrderBy(p => Guid.NewGuid()) // embaralhar
                .ToList();

            perguntaAtual = 0;
            pontuacao = 0;

            menuPanel.Visibility = Visibility.Collapsed;
            myCanvas.Visibility = Visibility.Visible;

            MostrarPergunta();
        }

        private void MostrarPergunta()
        {
            if (perguntaAtual >= perguntasSelecionadas.Count)
            {
                MessageBox.Show($"Fim do jogo! Pontuação: {pontuacao}/{perguntasSelecionadas.Count}");
                myCanvas.Visibility = Visibility.Collapsed;
                menuPanel.Visibility = Visibility.Visible;
                return;
            }

            var p = perguntasSelecionadas[perguntaAtual];

            txtQuestion.Text = p.Texto;
            ans1.Content = p.Alternativas[0];
            ans2.Content = p.Alternativas[1];
            ans3.Content = p.Alternativas[2];
            ans4.Content = p.Alternativas[3];

            qImage.Source = new BitmapImage(new Uri(p.CaminhoImagem));

            ans1.Tag = (p.RespostaCorreta == 0) ? "1" : "0";
            ans2.Tag = (p.RespostaCorreta == 1) ? "1" : "0";
            ans3.Tag = (p.RespostaCorreta == 2) ? "1" : "0";
            ans4.Tag = (p.RespostaCorreta == 3) ? "1" : "0";

            foreach (var x in myCanvas.Children.OfType<Button>())
                x.Background = Brushes.LightGray;

            scoreText.Content = $"Pontuação: {pontuacao}/{perguntasSelecionadas.Count}";
        }

        private void checkAnswer(object sender, RoutedEventArgs e)
        {
            Button clicked = sender as Button;

            if (clicked.Tag.ToString() == "1")
                pontuacao++;

            perguntaAtual++;
            MostrarPergunta();
        }
    }
}
