Classe Funcionario






using System;
using System.Collections.Generic;

namespace ConsoleApp
{
    internal class Funcionario
    {
        public static List<Funcionario> Funcionarios = new List<Funcionario>();

        private int Matricula;
        private string Nome;
        private string cargoAtual;
        private float salarioAtual;

        // Getters estilo Java
        public int getMatricula() { return Matricula; }
        public string getNome() { return Nome; }
        public string getCargoAtual() { return cargoAtual; }
        public float getSalarioAtual() { return salarioAtual; }

        // Construtor
        public Funcionario(int matricula, string nome, string cargoAtual, float salarioAtual)
        {
            this.Matricula = matricula;
            this.Nome = nome;
            this.cargoAtual = cargoAtual;
            this.salarioAtual = salarioAtual;
        }

        // Cadastrar funcionário
        public static bool cadastrar(Funcionario f)
        {
            foreach (var func in Funcionarios)
            {
                if (func.Matricula == f.Matricula)
                {
                    Console.WriteLine($"\nFuncionário com matrícula {f.Matricula} já cadastrado!");
                    return false;
                }
            }
            Funcionarios.Add(f);
            return true;
        }

        // Listar todos
        public static void listar()
        {
            Console.WriteLine("\nLista de funcionários cadastrados: \n");

            foreach (var f in Funcionarios)
            {
                Console.WriteLine($"Nome: {f.getNome()} \nMatrícula: {f.getMatricula()} \nCargo: {f.getCargoAtual()} \nSalário: R$ {f.getSalarioAtual()}");
                Console.WriteLine("------------------------------------");
            }
        }

        // Consultar funcionário por matrícula (interação com usuário)
        public static void consultar()
        {
            Console.Write("\nDigite a matrícula do funcionário que deseja consultar: ");
            int matricula = int.Parse(Console.ReadLine());

            Funcionario encontrado = null;

            foreach (var f in Funcionarios)
            {
                if (f.Matricula == matricula)
                {
                    encontrado = f;
                    break;
                }
            }

            if (encontrado != null)
            {
                Console.WriteLine($"\nFuncionário encontrado!");
                Console.WriteLine($"Nome: {encontrado.getNome()}");
                Console.WriteLine($"Matrícula: {encontrado.getMatricula()}");
                Console.WriteLine($"Cargo: {encontrado.getCargoAtual()}");
                Console.WriteLine($"Salário: R$ {encontrado.getSalarioAtual()}");
            }
            else
            {
                Console.WriteLine($"\nFuncionário com matrícula {matricula} não encontrado.");
            }
        }

        // Atualizar salário (soma um valor ao salário atual)
        public static void atualizarSalario(Funcionario f, float valor)
        {
            f.salarioAtual += valor;
            Console.WriteLine($"\nSalário atualizado do funcionário {f.getNome()}: R$ {f.getSalarioAtual()}");
        }
    }
}












Main








using System;

namespace ConsoleApp
{
    internal class Program
    {
        static void Main()
        {
            Console.WriteLine("--- GESTÃO DE RH ---");

            // Cadastrando
            Funcionario.cadastrar(new Funcionario(123, "Davi", "Adm", 1000f));
            Funcionario.cadastrar(new Funcionario(1234, "Daniel", "TI", 10000f));
            Funcionario.cadastrar(new Funcionario(321, "Maria", "RH", 2000f));

            // Listagem inicial
            Funcionario.listar();

            // Consultar funcionário
            Funcionario.consultar();

            // Atualizar salário
            var f = Funcionario.Funcionarios[0]; // pega o primeiro funcionário só para exemplo
            Funcionario.atualizarSalario(f, 500f);

            // Listar novamente para ver atualização
            Funcionario.listar();
        }
    }
}
























using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Quiz_Game_WPF_MOO_ICT
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // create a new list of integers called question numbers
        // this interger will hold how many questions we have for this quiz and we will shuffle this inside the start game function
        List<int> questionNumbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

        // create 3 more integers called qNum that will control which question shows on the screen, i and score
        int qNum = 0;
        int i;
        int score;


        public MainWindow()
        {
            InitializeComponent();

            // inside of the main constructor we will run the start game and next question function

            StartGame();
            NextQuestion();
        }

        private void checkAnswer(object sender, RoutedEventArgs e)
        {
            // this is the check answer event, this event is linked to each button on the canvas
            // when either of the buttons will be pressed we will run this event

            Button senderButton = sender as Button; // first check which button sent this event and link it to a local button inside of this event

            // in the if statement below we will check if the button clicked on has a 1 tag inside of it, if it does then we will add 1 to the score
            if (senderButton.Tag.ToString() == "1")
            {
                score++;
            }

            // if the qnum is less than 0 then we will reset the qnum integer to 0
            if (qNum < 0)
            {
                qNum = 0;
            }
            else
            {
                // if the qnum is greater than 0 then we will add 1 to the qnum integer
                qNum++;
            }

            // update the score text label each time the buttons are pressed
            scoreText.Content = "Answered Correctly " + score + "/" + questionNumbers.Count;

            // run the next question function
            NextQuestion();

        }

        private void RestartGame()
        {
            // restart game function will load all of the default values for this game
            score = 0; // set score to 0
            qNum = 1; // set qnum to -1
            i = 0; // set i to 0
            StartGame(); // run the start game function
        }

        private void NextQuestion()
        {
            // this function will check which question to show next and it will have all of the question and answer definitions

            // in the if statement below it will checking if the qnum integer is less than the total number of questions if it then we will set the value of i to the value of qnum

            if (qNum < questionNumbers.Count)
            {
                i = questionNumbers[qNum];
            }
            else
            {
                // if we have done below the number of questions we have available then we will restart the game
                RestartGame();
                return;
            }

            // below we are running a foreach loop where will check for each button inside of the canvas and when we find them we will set their tag to 0 and background to dakr salmon colour
            foreach (var x in myCanvas.Children.OfType<Button>())
            {
                x.Tag = "0";
                x.Background = Brushes.DarkSalmon;
            }


            // below you have all of the question and answers template
            // you can add your own questions to the txtQuestion section
            // and add your own answers inside of the ans1, ans2, ans3 content and so. 


            // this switch statement will check what value is inside of i integer and show the questions based on that value

            
               switch (i)
            {
                case 1:
                    txtQuestion.Text = "Questão 1: Qual é a capital da França?";
                    ans1.Content = "Berlim";
                    ans2.Content = "Madrid";
                    ans3.Content = "Paris";      // CORRETA
                    ans4.Content = "Lisboa";
                    ans3.Tag = "1";
                    qImage.Source = new BitmapImage(new Uri("pack://application:,,,/images/1.jpg"));
                    break;

                case 2:
                    txtQuestion.Text = "Questão 2: Quanto é 9 x 7?";
                    ans1.Content = "63";         // CORRETA
                    ans2.Content = "72";
                    ans3.Content = "56";
                    ans4.Content = "49";
                    ans1.Tag = "1";
                    qImage.Source = new BitmapImage(new Uri("pack://application:,,,/images/2.jpg"));
                    break;

                case 3:
                    txtQuestion.Text = "Questão 3: Qual é o maior oceano do mundo?";
                    ans1.Content = "Atlântico";
                    ans2.Content = "Pacífico";   // CORRETA
                    ans3.Content = "Índico";
                    ans4.Content = "Ártico";
                    ans2.Tag = "1";
                    qImage.Source = new BitmapImage(new Uri("pack://application:,,,/images/3.jpg"));
                    break;

                case 4:
                    txtQuestion.Text = "Questão 4: Qual é o elemento químico com símbolo O?";
                    ans1.Content = "Ouro";
                    ans2.Content = "Oxigênio";   // CORRETA
                    ans3.Content = "Zinco";
                    ans4.Content = "Prata";
                    ans2.Tag = "1";
                    qImage.Source = new BitmapImage(new Uri("pack://application:,,,/images/4.jpg"));
                    break;

                case 5:
                    txtQuestion.Text = "Questão 5: Qual país é conhecido pelo samba?";
                    ans1.Content = "Brasil";     // CORRETA
                    ans2.Content = "Espanha";
                    ans3.Content = "Argentina";
                    ans4.Content = "México";
                    ans1.Tag = "1";
                    qImage.Source = new BitmapImage(new Uri("pack://application:,,,/images/5.jpg"));
                    break;
                    
                case 6:
                txtQuestion.Text = "Questão 6: Quem escreveu 'Dom Quixote'?";
                ans1.Content = "Gabriel García Márquez";
                ans2.Content = "Miguel de Cervantes";  // CORRETA
                ans3.Content = "Fernando Pessoa";
                ans4.Content = "Machado de Assis";
                ans2.Tag = "1";
                qImage.Source = new BitmapImage(new Uri("pack://application:,,,/images/6.jpg"));
                break;

                case 7:
                    txtQuestion.Text = "Questão 7: Qual é o planeta mais próximo do Sol?";
                    ans1.Content = "Marte";
                    ans2.Content = "Vênus";
                    ans3.Content = "Mercúrio";       // CORRETA
                    ans4.Content = "Terra";
                    ans3.Tag = "1";
                    qImage.Source = new BitmapImage(new Uri("pack://application:,,,/images/7.jpg"));
                    break;

                case 8:
                    txtQuestion.Text = "Questão 8: Qual desses animais é um mamífero?";
                    ans1.Content = "Cobra";
                    ans2.Content = "Tubarão";
                    ans3.Content = "Golfinho";       // CORRETA
                    ans4.Content = "Papagaio";
                    ans3.Tag = "1";
                    qImage.Source = new BitmapImage(new Uri("pack://application:,,,/images/8.jpg"));
                    break;

                case 9:
                    txtQuestion.Text = "Questão 9: Qual é o idioma oficial do Egito?";
                    ans1.Content = "Árabe";          // CORRETA
                    ans2.Content = "Hebraico";
                    ans3.Content = "Turco";
                    ans4.Content = "Inglês";
                    ans1.Tag = "1";
                    qImage.Source = new BitmapImage(new Uri("pack://application:,,,/images/9.jpg"));
                    break;

                case 10:
                    txtQuestion.Text = "Questão 10: Qual invenção é atribuída a Thomas Edison?";
                    ans1.Content = "Telefone";
                    ans2.Content = "Lâmpada elétrica"; // CORRETA
                    ans3.Content = "Avião";
                    ans4.Content = "Motor a vapor";
                    ans2.Tag = "1";
                    qImage.Source = new BitmapImage(new Uri("pack://application:,,,/images/10.jpg"));
                    break;
            }
        }

        private void StartGame()
        {
            // this is the start game function
            // inside of this function we will randomise the questions list and save it back into the list 

            
            

            // save the random list to the question numbers list again
         

            // empty the question order label on the canvas
            questionOrder.Content = null;

            // run a for loop to add the value which will display the randomised list to the display so we can see how the list has been ramdomised
            for (int i = 0; i < questionNumbers.Count; i++)
            {
                questionOrder.Content += " " + questionNumbers[i].ToString();
            }

        }
    }
}

